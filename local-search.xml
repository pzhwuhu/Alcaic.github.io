<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>P2课上</title>
    <link href="/2024/10/22/P2%E8%AF%BE%E4%B8%8A/"/>
    <url>/2024/10/22/P2%E8%AF%BE%E4%B8%8A/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>通过阅读本文，你可以大致了解BUAA 2024秋季 P2课上测试的相关内容<br>本次主要考察MIPS汇编，第一题很easy，二三题都给了C代码，直接翻译即可。<br>题目每年都会发生变化，题面仅靠回忆，题意描述可能与原题有一定差异</p>          </div><h1>P2_Q1（Mooncake)</h1><h2 id="大意">大意</h2><p>中秋之际，小班长为同学们搬月饼。小班 N 个人，最少搬 L 个月饼， 最多搬 R 个月饼。搬来月饼后，每人拿一个，直到剩下的数量 &lt; N，并将剩下的月饼还回去。要实现每个人拿到尽可能多的月饼，并减少还回去的负担，请你计算拿多少个月饼 （用K表示）合适，输出每个人<strong>拿完剩下的</strong>月饼数。</p><h2 id="思路">思路</h2><p>纯数学题，读懂题意后，直接用 R / N，再将结果乘 N ，结果用 x 表示，那么此时 x 就是保证每个人拿到尽可能多的月饼的总月饼数，例如：n = 10, R = 36，则x=30。此时便得到了理想情况下拿的月饼数K，但是有一个最小值 L 限制，并注意要输出同学们拿剩下的月饼数，而不是K，故直接输出 x &lt; L ? L-x : 0。然后翻译。</p><h1>P2_Q2</h1><h2 id="大意-2">大意</h2><p>利用欧拉筛判断一个输入的数n是否为质数。大佬们说代码给的是欧式筛，我不太懂（逃）<span class="github-emoji" alias="sob" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f62d.png?v8">😭</span></p><h2 id="思路-2">思路</h2><p>没有思路，对着C代码翻译即可，也没有函数，无需维护变量，细心点，问题不大<span class="github-emoji" alias="smile" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8">😄</span></p><h1>P3_Q3</h1><h2 id="大意-3">大意</h2><p>这道题题面很长，有点麻烦，我没看，既然给了C代码，<s>直接肉编就好了</s> 😁</p><p>听别人说是输出在一个有向图中从给定出发点出发可到达的出度为0的点的个数，假如出发点出度为0则直接输出0</p><h2 id="思路-3">思路</h2><p>直接对着肉编，然后可以<strong>封装</strong>几个常用的函数为宏，比如<code>getInt</code> <code>putInt</code> <code>getIndex</code> <code>exit</code> ……（这几个宏很常用，<s>甚至可以开考前敲上去</s>）使用起来更加方便，也利于整体代码的美观与调试，值得一提的是，<strong>尽量避免在宏中使用寄存器</strong>，以此来避免可能的麻烦，除非迫不得已（如$a0, $v0等）,如果使用了寄存器，需<strong>注意上下文</strong>有无对寄存器值的维护或者压根这个寄存器就是随手用随手赋值的（这样并不被提倡）。</p><p>对于本题，每次递归前后，维护好 <code>$ra</code> 寄存器以及<code>u</code> <code>i</code> 的值即可，建议编写、调用宏<code>push</code> <code>pop</code></p><h1>结语</h1><p>值得一提的是，本次Q3来自我们亲爱的助教 zygg ，上次上机后我还问过他谁出题这个事来着（<s>未经</s>）<span class="github-emoji" alias="laughing" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8">😆</span>,他跟我说你下次上机就能初见端倪了。</p><p>P2之后就是P3——单周期CPU的logisim实现了，加油！</p>]]></content>
    
    
    <categories>
      
      <category>CO</category>
      
      <category>实验</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CO</tag>
      
      <tag>mips</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>热力学基础复习</title>
    <link href="/2024/10/20/%E7%83%AD%E5%8A%9B%E5%AD%A6%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/"/>
    <url>/2024/10/20/%E7%83%AD%E5%8A%9B%E5%AD%A6%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="热力学基础复习"><a href="#热力学基础复习" class="headerlink" title="热力学基础复习"></a>热力学基础复习</h1><h2 id="基本定义"><a href="#基本定义" class="headerlink" title="基本定义"></a>基本定义</h2><h3 id="热力学第零定律"><a href="#热力学第零定律" class="headerlink" title="热力学第零定律"></a>热力学第零定律</h3><ul><li>内容：如果两个物体都与处于确定状态的第三物体处于热平衡，则该两个物体彼此处于热平衡</li><li>宏观性质：处于同一热平衡状态的所有物体都具有<strong>共同</strong>的宏观性质，我们用<strong>温度</strong>来表征这一宏观性质</li></ul><h3 id="热力学过程"><a href="#热力学过程" class="headerlink" title="热力学过程"></a>热力学过程</h3><ul><li>系统：在热力学中，把所研究的物体或物体组叫做热力学系统(thermodynamic system),简称系统(system)</li><li>准静态过程：准静态过程是无限缓慢的状态变化过程，在过程进行的每一 步确保系统的状态均<strong>可视为平衡态</strong></li><li>热力学的研究是以准 静态过程的研究为基础的</li></ul><h3 id="功-能量-内能"><a href="#功-能量-内能" class="headerlink" title="功   能量   内能"></a>功   能量   内能</h3><ul><li>引入：<br><img src="/../img_post/physics_1.png"><br>设有一气缸，其中气体的压强为p, 活塞的面积为S，活塞与气缸间无摩擦，为了维持气体时时处在平衡态，外界和气体对活塞的压力必须相等.当活塞缓慢移动一微小距离dl 时，在这一微小的变化过程中，可认为压强p 处处均匀且大小不变，在此过程中，气体所做的功为<br>$$<br>dA &#x3D; pSdl &#x3D; pdV<br>$$</li><li>式中dV 是气体体积的微小增量.<em>在气体膨胀时, dV是正的，dA也是正的</em>，表示系 统对外做功；<em>在气体被压缩时，dV 是负的，dA 也是负的</em>，表示系统做负功，即外界 对系统做功.</li><li><strong>注意</strong>：这里的dA与我们高中定义的不同，反正我们高中说的是<em>外界对气体做的功</em>，也就是把对象调转了，注意区别</li><li>做功是系统与外界相互作用的一种方式，也是两者的能量交换的 一种方式.这种能量交换的方式是通过<strong>宏观的有规则运</strong>动(如机械运动、电流等) 来完成的.而热传递和做功不同，这种交换能量的方式是通过<strong>分子的无规则运动</strong>来完成</li><li>热力学系统具有一定的能量，叫做热力学系统的“内能”.上述实验事实表明：<strong>内能的改变量只决定于初末状态，而与所经历的过程无关</strong>.换句话说，内能是系统状态的单值函数.</li></ul><h3 id="热力学第一定律"><a href="#热力学第一定律" class="headerlink" title="热力学第一定律"></a>热力学第一定律</h3><p>如果有 一系统，外界对它传递的热量为Q, 系统从内能为E₁ 的初态改变到内能为E₂ 的 末态，同时系统对外做功为A, 那么,不论过程如何，总有<br>$$<br>Q &#x3D; E_{2} - E_{1} + A\tag{6-2}<br>$$<br>上式的<strong>意义</strong>就是：外界对系统传递的热量，<em>一部分使系统的内能增加，另一部分用于系统对外做功</em></p><h2 id="热力学第一定律的应用"><a href="#热力学第一定律的应用" class="headerlink" title="热力学第一定律的应用"></a>热力学第一定律的应用</h2><h3 id="等容过程"><a href="#等容过程" class="headerlink" title="等容过程"></a>等容过程</h3><p>等容过程的特征是气体的体积保持不变，即V为常量，dV&#x3D;0，相应地，也就有dA &#x3D; 0.，所以，<strong>外界传递给气体的热量全部用来增加气体的内能</strong></p><ul><li><p>摩尔定容热容：</p><ul><li>定义：气体的摩尔定容热容,<strong>是指1 mol 气体在体积不变的条件下，温度改变1K(或1℃)所吸收或放出的热量</strong>，Cv,m表示，所以<br>$$<br> dE &#x3D; \frac mM C_{v,m} dT \tag{6-7}<br>$$</li><li>应用：应该注意，上式是计算过程中<strong>理想气体内能变化的通用公式</strong>，<em>不仅仅适用于等容过程</em>！！！</li><li>计算：由上一章推导的内能公式<br>$$<br>E &#x3D; \frac mM \frac i 2 R T<br>$$<br>两边微分之后与上式比较可得<br>$$<br>C_{v,m} &#x3D; \frac i 2 R \tag{6-8}<br>$$</li><li>上式说明：理想气体的摩尔定容热容是一个<strong>只与分子的自由度有关的量</strong>，它与气体的温度无关</li></ul></li></ul><h3 id="等压过程"><a href="#等压过程" class="headerlink" title="等压过程"></a>等压过程</h3><p>注：以吸热膨胀为例</p><ul><li><p>等压过程做的功（自己想象p-V图）<br>$$<br>A &#x3D; p(V_{2}-V_{1})&#x3D;\frac mM R (T_{2}-T_{1})\tag{6-10b}<br>$$</p></li><li><p>吸热<br>$$<br>Q &#x3D; \Delta E + A &#x3D;E_{2}-E_{1} +\frac mM R (T_{2}-T_{1})\tag{6-11}<br>$$</p></li><li><p>可见：气体在等压膨胀过程中，<strong>所吸收的热量一部分用来增加内能，另一部分用于气体对外做功</strong>；气体在等压压缩过程中，外界对气体做功，同时内能减小，放出 热量.</p></li><li><p>定义：我们把1 mol气体在压强不变的条件下，温度改变1K 所需要的热量叫做气 体的<em>摩尔定压热容</em>：<br>$$<br>C_{p,m} &#x3D; \frac{\delta Q_{p}}{\frac mM dT}<br>$$</p></li><li><p>计算：根据公式6-2,6-7以及6-11以及以上定义，可得<em>迈耶公式</em><br>$$<br>C_{p,m} &#x3D; C_{v,m}+R\tag{6-12}<br>$$</p></li><li><p>理解：根据定义，等压过程<em>所吸收的热量一部分用来增加内能，另一部分用于气体对外做功</em>，而<em>等容过程吸收的热量全部用来增加内能</em>，所以摩尔定压热容大于摩尔定容热容也很好理解</p></li><li><p>摩尔热容比：由公式6-8和6-12可以得出<br>$$<br>C_{p,m}&#x3D;\frac{i+2}2R \tag{6-13}<br>$$<br>我们把二者之比叫做<strong>摩尔热容比</strong>,用γ表示,该值只与<strong>气体分子的自由度有关， 而与气体温度无关</strong>.<br>$$<br>\gamma &#x3D; \frac{C_{p,m}}{C_{v,m}}&#x3D;\frac{i+2}i \tag{6-14}<br>$$</p></li></ul><h3 id="等温过程"><a href="#等温过程" class="headerlink" title="等温过程"></a>等温过程</h3><ul><li><p>特点：温度不变，内能不变</p></li><li><p>偷懒：由于书上只有一页介绍等温过程，而且比较精简，故直接附上图片(<del>其实是偷懒</del> ​ <span class="github-emoji" alias="smile" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8">&#x1f604;</span>)</p></li></ul><p>​<img src="/../img_post/physics_3.png"></p><h3 id="绝热过程"><a href="#绝热过程" class="headerlink" title="绝热过程"></a>绝热过程</h3><p><img src="/../img_post/physics_2.png"></p>]]></content>
    
    
    <categories>
      
      <category>物理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>物理</tag>
      
      <tag>复习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>P1课下</title>
    <link href="/2024/10/06/P1%E8%AF%BE%E4%B8%8B/"/>
    <url>/2024/10/06/P1%E8%AF%BE%E4%B8%8B/</url>
    
    <content type="html"><![CDATA[<p>就是写篇博客记录下自己的做题过程&amp;心得，并非题解，如果寻求速通题解的朋友可以移步讨论区或者其他dalao的博客哟 <span class="github-emoji" alias="smile" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8">&#x1f604;</span></p><h1 id="Q1-Splitter"><a href="#Q1-Splitter" class="headerlink" title="Q1 Splitter"></a>Q1 Splitter</h1><p>题面：使用 Verilog 搭建一个 32位  Splitter , 给定一个 32位 的二进制数作为输入，将其划分为 四个 8位 的二进制数作为输出<br>纯复习题，就是按部就班地将input的 四个 8位 二进制数作为 四个 输出的驱动即可<br>可悲的是，本人第一遍竟然把 32 位的 Input写成了input 数组 <span class="github-emoji" alias="point_down" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f447.png?v8">&#x1f447;</span></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs verilog"># wrong<br><span class="hljs-keyword">input</span> A [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>],<br># correct<br><span class="hljs-keyword">input</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] A，<br></code></pre></td></tr></table></figure><p>果然，还是太久不写verilog，生疏了（<del>其实就是菜</del>）<span class="github-emoji" alias="cry" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8">&#x1f622;</span></p><h1 id="Q2-ALU"><a href="#Q2-ALU" class="headerlink" title="Q2 ALU"></a>Q2 ALU</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>使用 Verilog 搭建一个 32 位六运算 ALU 并提交。具体模块端口定义如下：（看到这个表格才发现我Q1的弱智错误似乎就是因为题目的描述是A [31:0] (<del>疯狂找借口</del>) <span class="github-emoji" alias="stuck_out_tongue_closed_eyes" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f61d.png?v8">&#x1f61d;</span></p><p><img src="/../img_post/p1_1.png" alt=" "></p><p>模块功能如下：</p><p><img src="/../img_post/p1_2.png" alt=" "></p><h2 id="知识复习："><a href="#知识复习：" class="headerlink" title="知识复习："></a>知识复习：</h2><p>在这里我们需要复习逻辑右移和算术右移的区别：</p><p>逻辑右移不考虑符号位，右移一位，左边补零即可。</p><p>算术右移需要考虑符号位，右移一位，若符号位为 1 ，在左边补 1 ；否则，补 0 。</p><p>例如，8 位二进制数 10111101 分别右移2位。</p><ul><li>逻辑右移结果为<strong>00</strong>101111</li><li>算术右移结果为<strong>11</strong>101111</li></ul><p><strong>提示</strong>：可以回Pre中的<a href="http://cscore.buaa.edu.cn/tutorial/verilog/verilog-3/verilog-3-7/">这一小节</a>好好复习了，注意**$signed()**的用法</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>其他的没什么说的，照搬功能描述，需要注意的是最后一个op, <strong>A有符号</strong> ，B无符号</p><p>如果直接三目运算符加$signed(A) &gt;&gt;&gt; B,则根据符号原则（最外层确定，向内传播），会把结果变为无符号数，这显然达不到我们想要的结果</p><p>因此，采取Pre中的一种推荐方案“对于复杂的表达式避免使用 <code>$signed()</code> ，如果希望使用 <code>$signed()</code> 可以将这一部分抽离出来单独作为一个变量”</p><p>意即单独定义一个wire型变量作为$signed(A) &gt;&gt;&gt; B</p><p>注意到这点后，本题应该没什么难度了，最后，贴上俺的代码</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> alu (<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] A,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] B,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] ALUOp,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] C<br>);<br>    <span class="hljs-keyword">wire</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] tmp;<br>    <span class="hljs-keyword">assign</span> tmp =  <span class="hljs-built_in">$signed</span>(A) &gt;&gt;&gt; B;<br>    <span class="hljs-keyword">assign</span> C = (ALUOp == <span class="hljs-number">3&#x27;b000</span>) ? (A + B) :<br>               (ALUOp == <span class="hljs-number">3&#x27;b001</span>) ? (A - B) :<br>               (ALUOp == <span class="hljs-number">3&#x27;b010</span>) ? (A &amp; B) :<br>               (ALUOp == <span class="hljs-number">3&#x27;b011</span>) ? (A | B) :<br>               (ALUOp == <span class="hljs-number">3&#x27;b100</span>) ? (A &gt;&gt; B) :<br>               (ALUOp == <span class="hljs-number">3&#x27;b101</span>) ? tmp :<br>                <span class="hljs-number">0</span>;<br>    <br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><p><strong>结语</strong></p><p>本蒟蒻只做了两道目前，先上传到博客主要是测试一下代码块的风格设置是否成功以及其他功能，后续还会更新本篇 <span class="github-emoji" alias="yum" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f60b.png?v8">&#x1f60b;</span></p><hr><p><strong>updated: 10.10</strong></p><h1 id="Q3-EXT"><a href="#Q3-EXT" class="headerlink" title="Q3 EXT"></a>Q3 EXT</h1><h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p><img src="/../img_post/p1_3.png"></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>verilog中变量位宽以及进制的定义不可偷懒，否则默认为10进制，32位。</p><p>本题直接根据EOp进行位拼接即可，符号位扩展直接拼接“16个最高位”，零扩展直接拼接0即可，<strong>需注意 0 要写做 16’b0</strong>，否则默认为32位的，贴一下本人的代码</p><p>值得注意的是，{16’b0} 也可以写成 {16{1’b0}} ，只是看起来有点“臃肿” <span class="github-emoji" alias="thinking" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f914.png?v8">&#x1f914;</span></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> ext (<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">15</span>:<span class="hljs-number">0</span>] imm,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] Eop,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] ext<br>);<br>    <span class="hljs-keyword">assign</span> ext = (Eop == <span class="hljs-number">2&#x27;b00</span>) ? &#123;&#123;<span class="hljs-number">16</span>&#123;imm[<span class="hljs-number">15</span>]&#125;&#125;, imm&#125; :<br>                 (Eop == <span class="hljs-number">2&#x27;b01</span>) ? &#123;<span class="hljs-number">16&#x27;b0</span>, imm&#125; : <br>                 (Eop == <span class="hljs-number">2&#x27;b10</span>) ? &#123;imm, <span class="hljs-number">16&#x27;b0</span>&#125; :<br>                 (Eop == <span class="hljs-number">2&#x27;b11</span>) ? &#123;&#123;<span class="hljs-number">14</span>&#123;imm[<span class="hljs-number">15</span>]&#125;&#125;, imm, <span class="hljs-number">2&#x27;b0</span>&#125; :<br>                         <span class="hljs-number">32&#x27;b0</span>;<br>    <br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h1 id="Q4-Gray"><a href="#Q4-Gray" class="headerlink" title="Q4 Gray"></a>Q4 Gray</h1><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2><p>就是设计一个格雷码计数器，具备同步复位功能和使能端，需要了解格雷码的同学可以<a href="https://metaso.cn/search/8532650087478169600?q=%E6%A0%BC%E9%9B%B7%E7%A0%81&bs=8532650003386961920">点击我</a>，顺便给各位推荐一下<a href="https://metaso.cn/">秘塔搜索</a>比较好用的搜索引擎，可以搜论文（选择“学术”搜索模式），最近也提供了搜索图片功能，无广告，在每次搜索下方还会有相关参考文献，可以点击跳转，超丰富。like this:</p><p><img src="/../img_post/metaso.png"></p><p>步入正题，直接附上题目说明</p><p><img src="/../img_post/p1_4_2.png"></p><hr><p>题目还贴心地附上了格雷码转换表，以及波形图（<del>虽然我没有写testbench</del>，但这并不是一个好习惯，各位还是要尽量写一写tb的 <span class="github-emoji" alias="smile" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8">&#x1f604;</span>)</p><p><img src="/../img_post/p1_4.png"></p><p>个人感觉没啥好说的，直接写就是了，附上代码</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> gray (<br>    <span class="hljs-keyword">input</span> Clk,<br>    <span class="hljs-keyword">input</span> Reset,<br>    <span class="hljs-keyword">input</span> En,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] Output,<br>    <span class="hljs-keyword">output</span> Overflow<br>);<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] code = <span class="hljs-number">3&#x27;b0</span>;<br>    <span class="hljs-keyword">reg</span> over = <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> Clk) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span>(Reset)<span class="hljs-keyword">begin</span><br>            code &lt;= <span class="hljs-number">3&#x27;b0</span>;<br>            over &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>        <span class="hljs-keyword">end</span><br><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">if</span>(En)<span class="hljs-keyword">begin</span><br>                <span class="hljs-keyword">if</span>(code == <span class="hljs-number">3&#x27;b111</span>)<span class="hljs-keyword">begin</span><br>                    over &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>                <span class="hljs-keyword">end</span><br>                code &lt;= code + <span class="hljs-number">3&#x27;b1</span>;<br>            <span class="hljs-keyword">end</span><br><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>                code &lt;= code;<br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><br>        <span class="hljs-keyword">assign</span> Output = (code == <span class="hljs-number">3&#x27;b000</span>) ? <span class="hljs-number">3&#x27;b000</span> :<br>                        (code == <span class="hljs-number">3&#x27;b001</span>) ? <span class="hljs-number">3&#x27;b001</span> :<br>                        (code == <span class="hljs-number">3&#x27;b010</span>) ? <span class="hljs-number">3&#x27;b011</span> :<br>                        (code == <span class="hljs-number">3&#x27;b011</span>) ? <span class="hljs-number">3&#x27;b010</span> :<br>                        (code == <span class="hljs-number">3&#x27;b100</span>) ? <span class="hljs-number">3&#x27;b110</span> :<br>                        (code == <span class="hljs-number">3&#x27;b101</span>) ? <span class="hljs-number">3&#x27;b111</span> :<br>                        (code == <span class="hljs-number">3&#x27;b110</span>) ? <span class="hljs-number">3&#x27;b101</span> :<br>                        (code == <span class="hljs-number">3&#x27;b111</span>) ? <span class="hljs-number">3&#x27;b100</span> :<br>                        <span class="hljs-number">3&#x27;b000</span>;<br>        <span class="hljs-keyword">assign</span> Overflow = over;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h1 id="Q5-Expr"><a href="#Q5-Expr" class="headerlink" title="Q5 Expr"></a>Q5 Expr</h1><h2 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h2><p><img src="/../img_post/p1_5.png"></p><p><img src="/../img_post/p1_5_2.png"></p><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>题目是几天前写的，<del>忘了（bushi)</del>😢</p><hr><p>定义有点递归的味道emmm……<br>“单个数字[0-9]是F； b. 如果<strong>X</strong>是F，<strong>Y</strong>是F，<strong>X+Y</strong>也是F； c. 如果<strong>X</strong>是F，<strong>Y</strong>是F，<strong>X*Y</strong>也是F”</p><p>虽然题目没有明说，但根据题目描述“每个时钟上升沿，状态机从 in 中读入一个ASCII编码的字符。假设读入的第i个字符为ci，则第n个时钟上升沿时，可以拼出一个字符串: s&#x3D;c1c2….cn  我们需要你此时判断 s 是否符合表达式F的定义”以及波形图，大致可以确定状态机类型：Moore型状态机<br>读懂题目意思后，其实正确状态就是类似 1 + 2 * 3 + 7 * 9 ,即：<br><strong>必须先输入一个数字，然后接着输入一个运算符，连续的数字或者运算符都直接pass掉，合法状态要么是一个数字要么是（数字）（运算符）（数字）</strong>。故设计5种状态，分别为：</p><table><thead><tr><th>状态</th><th>说明</th></tr></thead><tbody><tr><td>state_0</td><td>空状态，初始状态</td></tr><tr><td>state_1</td><td>错误状态，当非法输入后一直保持此状态，除非reset</td></tr><tr><td>state_2</td><td>只输入了一个数字</td></tr><tr><td>state_3</td><td>后缀输入为（数字）（运算符）</td></tr><tr><td>state_4</td><td>后缀输入为（数字）（运算符）（数字）</td></tr></tbody></table><p>后来发现似乎state_2 和 state_4 可以合并，都行<br>代码：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> expr (<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> clr,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] in,<br>    <span class="hljs-keyword">output</span> out<br>);<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] state = <span class="hljs-number">3&#x27;b0</span>;<br>    <span class="hljs-keyword">parameter</span> state_0 = <span class="hljs-number">3&#x27;b000</span>,<br>              state_1 = <span class="hljs-number">3&#x27;b001</span>,<br>              state_2 = <span class="hljs-number">3&#x27;b010</span>,<br>              state_3 = <span class="hljs-number">3&#x27;b011</span>,<br>              state_4 = <span class="hljs-number">3&#x27;b100</span>;<br><br>    <span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">posedge</span> clr) <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">if</span>(clr) <span class="hljs-keyword">begin</span><br>                state &lt;= state_0;<br>            <span class="hljs-keyword">end</span><br><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>                <span class="hljs-keyword">case</span> (state)<br>                    state_0: <span class="hljs-keyword">begin</span><br>                        <span class="hljs-keyword">if</span>(in &gt; <span class="hljs-number">6&#x27;d47</span> &amp;&amp; in &lt; <span class="hljs-number">6&#x27;d58</span>)<span class="hljs-keyword">begin</span><br>                            state &lt;= state_2;<br>                        <span class="hljs-keyword">end</span><br>                        <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span> <span class="hljs-comment">//first input must be number</span><br>                            state &lt;= state_1;<br>                        <span class="hljs-keyword">end</span><br>                    <span class="hljs-keyword">end</span><br><br>                    state_1: <span class="hljs-keyword">begin</span><br>                            state &lt;= state_1;<br>                    <span class="hljs-keyword">end</span><br><br>                    state_2: <span class="hljs-keyword">begin</span><br>                        <span class="hljs-keyword">if</span>(in == <span class="hljs-number">6&#x27;d42</span> || in == <span class="hljs-number">6&#x27;d43</span>)<span class="hljs-keyword">begin</span><br>                            state &lt;= state_3;<br>                        <span class="hljs-keyword">end</span><br>                        <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>                            state &lt;= state_1;<br>                        <span class="hljs-keyword">end</span><br>                    <span class="hljs-keyword">end</span><br><br>                    state_3: <span class="hljs-keyword">begin</span><br>                        <span class="hljs-keyword">if</span>(in &gt; <span class="hljs-number">6&#x27;d47</span> &amp;&amp; in &lt; <span class="hljs-number">6&#x27;d58</span>) <span class="hljs-keyword">begin</span><br>                            state &lt;= state_4;<br>                        <span class="hljs-keyword">end</span><br>                        <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>                            state &lt;= state_1;<br>                        <span class="hljs-keyword">end</span><br>                    <span class="hljs-keyword">end</span><br><br>                    state_4: <span class="hljs-keyword">begin</span><br>                        <span class="hljs-keyword">if</span>(in == <span class="hljs-number">6&#x27;d42</span> || in == <span class="hljs-number">6&#x27;d43</span>) <span class="hljs-keyword">begin</span><br>                            state &lt;= state_3;<br>                        <span class="hljs-keyword">end</span><br>                        <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>                            state &lt;= state_1;<br>                        <span class="hljs-keyword">end</span><br>                    <span class="hljs-keyword">end</span><br><br>                    <span class="hljs-keyword">default</span>: state &lt;= state_0;<br>                <span class="hljs-keyword">endcase</span><br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">end</span>    <br>                <br>    <span class="hljs-keyword">assign</span> out = (state == state_4) ? <span class="hljs-number">1&#x27;b1</span> :<br> (state == state_2) ? <span class="hljs-number">1&#x27;b1</span> : <span class="hljs-number">1&#x27;b0</span>;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h1 id="Q6-BlockChecker"><a href="#Q6-BlockChecker" class="headerlink" title="Q6 BlockChecker"></a>Q6 BlockChecker</h1><h2 id="本题为附加题，通过与否不计入P1课下通过条件"><a href="#本题为附加题，通过与否不计入P1课下通过条件" class="headerlink" title="本题为附加题，通过与否不计入P1课下通过条件"></a>本题为附加题，通过与否不计入P1课下通过条件</h2><h2 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h2><p><img src="/../img_post/p1_6.png"></p><p><img src="/../img_post/p1_6_2.png"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>其实就是把之前数据结构的一道括号匹配题魔改了，<strong>核心思路差不多，通过一个flag来标志匹配状态，读入 Begin（左括号）时 flag 加 1 ，End（右括号）时flag - 1，最后判断 flag 是否为 0 来进行输出</strong>，<strong>同时如果输入 begin 之后，不输入空格，而是输入其他字符，则应该把flag相应地加（减）回去。</strong><br><strong>值得注意的是</strong>：本题是一道本题依旧是 Moore 状态机，因为观察波形输出 result 只在 clk 上升沿变化 ！</p><p>对于输入，如果未匹配的 end 出现在了 begin 前面， 则输入已经非法，此后不管输入如何，都输出 0 （除非reset），那么我们便可以设置一个单独的状态来保存这一状态， 当flag &lt; 0 时直接就“锁”在这个状态里。</p><p>同时，鼓励大家<strong>使用parameter</strong> 来声明_状态_这一常量。</p><p>多的懒得说了，代码里有注释，直接上代码😁😁😁</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> BlockChecker (<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> reset,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] in,<br>    <span class="hljs-keyword">output</span> result<br>);<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] state = <span class="hljs-number">4&#x27;b0001</span>; <span class="hljs-comment">//store status</span><br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] match = <span class="hljs-number">32&#x27;b0</span>; <span class="hljs-comment">//store if_match</span><br><br>    <span class="hljs-keyword">parameter</span> st_0 = <span class="hljs-number">4&#x27;b0000</span>, <span class="hljs-comment">//null or initial</span><br>              st_1 = <span class="hljs-number">4&#x27;b0001</span>, <span class="hljs-comment">//input &quot; &quot;</span><br>              st_2 = <span class="hljs-number">4&#x27;b0010</span>, <span class="hljs-comment">//input &quot;b&quot;</span><br>              st_3 = <span class="hljs-number">4&#x27;b0011</span>, <span class="hljs-comment">//input &quot;be&quot;</span><br>              st_4 = <span class="hljs-number">4&#x27;b0100</span>, <span class="hljs-comment">//input &quot;beg&quot;</span><br>              st_5 = <span class="hljs-number">4&#x27;b0101</span>, <span class="hljs-comment">//input &quot;begi&quot;</span><br>              st_6 = <span class="hljs-number">4&#x27;b0110</span>, <span class="hljs-comment">//input &quot;begin&quot;</span><br>              st_7 = <span class="hljs-number">4&#x27;b0111</span>, <span class="hljs-comment">//input other words,such as &quot;hello&quot;</span><br>              st_8 = <span class="hljs-number">4&#x27;b1000</span>, <span class="hljs-comment">//input &quot;e&quot;</span><br>              st_9 = <span class="hljs-number">4&#x27;b1001</span>, <span class="hljs-comment">//input &quot;en&quot;</span><br>             st_10 = <span class="hljs-number">4&#x27;b1010</span>; <span class="hljs-comment">//input &quot;end&quot;</span><br>    <br>    <span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">posedge</span> reset) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span>(reset) <span class="hljs-keyword">begin</span><br>            state &lt;= st_1;<br>            match &lt;= <span class="hljs-number">32&#x27;b0</span>;<br>        <span class="hljs-keyword">end</span><br>        <br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">case</span> (state)<br>                st_0: <span class="hljs-keyword">begin</span><br>                    state &lt;= st_0;<br>                <span class="hljs-keyword">end</span><br><br>                st_1: <span class="hljs-keyword">begin</span><br>                    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">$signed</span> (match) &lt; <span class="hljs-built_in">$signed</span>(<span class="hljs-number">32&#x27;b0</span>)) <span class="hljs-keyword">begin</span><br>                        state &lt;= st_0;<br>                    <span class="hljs-keyword">end</span><br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>                            <span class="hljs-keyword">if</span>(in == <span class="hljs-string">&quot;b&quot;</span> || in == <span class="hljs-string">&quot;B&quot;</span>) <span class="hljs-keyword">begin</span><br>                            state &lt;= st_2;<br>                        <span class="hljs-keyword">end</span><br>                        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(in == <span class="hljs-string">&quot;e&quot;</span> || in == <span class="hljs-string">&quot;E&quot;</span>) <span class="hljs-keyword">begin</span><br>                            state &lt;= st_8;<br>                        <span class="hljs-keyword">end</span><br>                        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(in == <span class="hljs-string">&quot; &quot;</span>)<span class="hljs-keyword">begin</span><br>                            state &lt;= st_1;<br>                        <span class="hljs-keyword">end</span><br>                        <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>                            state &lt;= st_7;<br>                        <span class="hljs-keyword">end</span><br>                    <span class="hljs-keyword">end</span><br>                    <br>                <span class="hljs-keyword">end</span><br><br>                st_2: <span class="hljs-keyword">begin</span><br>                    <span class="hljs-keyword">if</span>(in == <span class="hljs-string">&quot;e&quot;</span> || in == <span class="hljs-string">&quot;E&quot;</span>) <span class="hljs-keyword">begin</span><br>                        state &lt;= st_3;<br>                    <span class="hljs-keyword">end</span><br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>                        state &lt;= st_7;<br>                    <span class="hljs-keyword">end</span><br>                <span class="hljs-keyword">end</span><br><br>                st_3: <span class="hljs-keyword">begin</span><br>                    <span class="hljs-keyword">if</span>(in == <span class="hljs-string">&quot;g&quot;</span> || in == <span class="hljs-string">&quot;G&quot;</span>) <span class="hljs-keyword">begin</span><br>                        state &lt;= st_4;<br>                    <span class="hljs-keyword">end</span><br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(in == <span class="hljs-string">&quot; &quot;</span>)<span class="hljs-keyword">begin</span><br>                        state &lt;= st_1;<br>                    <span class="hljs-keyword">end</span><br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>                        state &lt;= st_7;<br>                    <span class="hljs-keyword">end</span><br>                <span class="hljs-keyword">end</span><br><br>                st_4: <span class="hljs-keyword">begin</span><br>                    <span class="hljs-keyword">if</span>(in == <span class="hljs-string">&quot;i&quot;</span> || in == <span class="hljs-string">&quot;I&quot;</span>) <span class="hljs-keyword">begin</span><br>                        state &lt;= st_5;<br>                    <span class="hljs-keyword">end</span><br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(in == <span class="hljs-string">&quot; &quot;</span>)<span class="hljs-keyword">begin</span><br>                        state &lt;= st_1;<br>                    <span class="hljs-keyword">end</span><br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>                        state &lt;= st_7;<br>                    <span class="hljs-keyword">end</span><br>                <span class="hljs-keyword">end</span><br><br>                st_5: <span class="hljs-keyword">begin</span><br>                    <span class="hljs-keyword">if</span>(in == <span class="hljs-string">&quot;n&quot;</span> || in == <span class="hljs-string">&quot;N&quot;</span>) <span class="hljs-keyword">begin</span><br>                        match &lt;= match + <span class="hljs-number">32&#x27;b1</span>;<br>                        state &lt;= st_6;<br>                    <span class="hljs-keyword">end</span><br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(in == <span class="hljs-string">&quot; &quot;</span>)<span class="hljs-keyword">begin</span><br>                        state &lt;= st_1;<br>                    <span class="hljs-keyword">end</span><br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>                        state &lt;= st_7;<br>                    <span class="hljs-keyword">end</span><br>                <span class="hljs-keyword">end</span><br><br>                st_6: <span class="hljs-keyword">begin</span><br>                    <span class="hljs-keyword">if</span>(in == <span class="hljs-string">&quot; &quot;</span>) <span class="hljs-keyword">begin</span><br>                        state &lt;= st_1;<br>                    <span class="hljs-keyword">end</span><br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>                        match &lt;= match - <span class="hljs-number">32&#x27;b1</span>;<br>                        state &lt;= st_7;<br>                    <span class="hljs-keyword">end</span><br>                <span class="hljs-keyword">end</span><br><br>                st_7: <span class="hljs-keyword">begin</span><br>                    <span class="hljs-keyword">if</span>(in == <span class="hljs-string">&quot; &quot;</span>) <span class="hljs-keyword">begin</span><br>                        state &lt;= st_1;<br>                    <span class="hljs-keyword">end</span><br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>                        state &lt;= st_7;<br>                    <span class="hljs-keyword">end</span><br>                <span class="hljs-keyword">end</span><br><br>                st_8: <span class="hljs-keyword">begin</span><br>                    <span class="hljs-keyword">if</span>(in == <span class="hljs-string">&quot;n&quot;</span> || in == <span class="hljs-string">&quot;N&quot;</span>) <span class="hljs-keyword">begin</span><br>                        state &lt;= st_9;<br>                    <span class="hljs-keyword">end</span><br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(in == <span class="hljs-string">&quot; &quot;</span>)<span class="hljs-keyword">begin</span><br>                        state &lt;= st_1;<br>                    <span class="hljs-keyword">end</span><br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>                        state &lt;= st_7;<br>                    <span class="hljs-keyword">end</span><br>                <span class="hljs-keyword">end</span><br><br>                st_9: <span class="hljs-keyword">begin</span><br>                    <span class="hljs-keyword">if</span>(in == <span class="hljs-string">&quot;d&quot;</span> || in == <span class="hljs-string">&quot;D&quot;</span>) <span class="hljs-keyword">begin</span><br>                        match &lt;= match - <span class="hljs-number">32&#x27;b1</span>;<br>                        state &lt;= st_10;<br>                    <span class="hljs-keyword">end</span><br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(in == <span class="hljs-string">&quot; &quot;</span>)<span class="hljs-keyword">begin</span><br>                        state &lt;= st_1;<br>                    <span class="hljs-keyword">end</span><br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>                        state &lt;= st_7;<br>                    <span class="hljs-keyword">end</span><br>                <span class="hljs-keyword">end</span><br><br>                st_10: <span class="hljs-keyword">begin</span><br>                    <span class="hljs-keyword">if</span>(in == <span class="hljs-string">&quot; &quot;</span>) <span class="hljs-keyword">begin</span><br>                        state &lt;= st_1;<br>                    <span class="hljs-keyword">end</span><br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>                        match &lt;= match + <span class="hljs-number">32&#x27;b1</span>;<br>                        state &lt;= st_7;<br>                    <span class="hljs-keyword">end</span><br>                <span class="hljs-keyword">end</span><br><br>                <span class="hljs-keyword">default</span>: state &lt;= st_0;<br><br>            <span class="hljs-keyword">endcase</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-keyword">assign</span> result = (match == <span class="hljs-number">32&#x27;b0</span>) ? <span class="hljs-number">1&#x27;b1</span> : <span class="hljs-number">1&#x27;b0</span>;<br><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><p>最后提一嘴，本人一开始不知道verilog中可以直接双引号加字母，like “A”,来表示字母的acii码，，也定义了一堆ascii常量，悲!😭😭😭</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">parameter</span> in_b = <span class="hljs-number">8&#x27;d66</span>, in_B = <span class="hljs-number">8&#x27;d98</span>,<br>          in_d = <span class="hljs-number">8&#x27;d68</span>, in_D = <span class="hljs-number">8&#x27;d100</span>,<br>          in_e = <span class="hljs-number">8&#x27;d69</span>, in_E = <span class="hljs-number">8&#x27;d101</span>,<br>          in_g = <span class="hljs-number">8&#x27;d71</span>, in_G = <span class="hljs-number">8&#x27;d103</span>,<br>          in_i = <span class="hljs-number">8&#x27;d73</span>, in_I = <span class="hljs-number">8&#x27;d105</span>,<br>          in_n = <span class="hljs-number">8&#x27;d78</span>, in_N = <span class="hljs-number">8&#x27;d110</span>,<br>          in_space = <span class="hljs-number">8&#x27;d32</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CO</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CO</tag>
      
      <tag>Verilog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>My fist blog</title>
    <link href="/2024/10/05/My-fist-blog/"/>
    <url>/2024/10/05/My-fist-blog/</url>
    
    <content type="html"><![CDATA[<h1>过程</h1><p>经过了大概一天的努力，<strong>个人博客终于搭建好了！</strong><s>虽然很简陋（后续会不断完善）</s> 采用的是hexo架构和fluid主题<br>这一天下来，也不容易啊，走了不少弯路，踩了很多坑，不断地上网查阅资料，也有很多自己摸索的地方，磕磕绊绊的过程中也有不少收获。</p><h1>感想</h1><h2 id="还好有个国庆假让我有时间花一整天搭建博客-（其实是暑假纯玩去了）">还好有个国庆假让我有时间花一整天搭建博客~~（其实是暑假纯玩去了）~~</h2><h2 id="接下来还需要学习的地方">接下来还需要学习的地方</h2><ul><li>了解git的用法</li><li>尝试将fluid主题的代码块修改为Mac风格<s>纯粹是为了装</s></li><li>写物理笔记并上传博客</li><li>写P1课下并写一篇心得</li></ul><h1>鸣谢</h1><ol><li><a href="https://hexo.fluid-dev.com/docs/start/">Fluid主题官方介绍文档</a> 全中文文档</li><li><a href="https://zhuanlan.zhihu.com/p/371995929">知乎大神的博客搭建指南</a> 手把手教学</li><li>各位学长学姐，正是看了你们的博客，才想建一个自己的，motivation了算是</li></ol>]]></content>
    
    
    <categories>
      
      <category>-日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-碎碎念</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
